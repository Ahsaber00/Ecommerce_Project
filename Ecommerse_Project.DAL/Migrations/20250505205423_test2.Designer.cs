// <auto-generated />
using System;
using Ecommerse_Project.DAL.Dbcontext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Ecommerse_Project.DAL.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20250505205423_test2")]
    partial class test2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Addresss");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Admin", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Admins");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "admin@example.com",
                            Name = "Admin User",
                            Password = "hashedpassword"
                        });
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId")
                        .IsUnique();

                    b.ToTable("Cart");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.CartProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CartId")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CartId");

                    b.HasIndex("CartId");

                    b.ToTable("CartProduct");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Men"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Women"
                        },
                        new
                        {
                            Id = 4,
                            Name = "T-Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 5,
                            Name = "Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 6,
                            Name = "Jeans",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 7,
                            Name = "Shoes",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            Id = 8,
                            Name = "Dresses",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 9,
                            Name = "Blouses",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 10,
                            Name = "Skirts",
                            ParentCategoryId = 2
                        },
                        new
                        {
                            Id = 11,
                            Name = "Heels",
                            ParentCategoryId = 2
                        });
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(25)
                        .HasColumnType("nvarchar(25)");

                    b.Property<DateTime>("RegisterDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.CustomerProductReview", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.HasKey("ProductId", "CustomerId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerProductReviews");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Image", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AdressId")
                        .HasColumnType("int");

                    b.Property<decimal>("Cost")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("PaymentId")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("TrackingDetailsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.HasIndex("TrackingDetailsId")
                        .IsUnique();

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Paymen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("Amount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("Paymens");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AddedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("AdminID")
                        .HasColumnType("int");

                    b.Property<string>("Brand")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Material")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdminID");

                    b.HasIndex("CategoryId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6432),
                            AdminID = 1,
                            Brand = "Nike",
                            CategoryId = 4,
                            Color = "Black",
                            Description = "Comfortable and breathable cotton T-shirt, ideal for daily wear.",
                            Material = "Cotton",
                            Name = "Nike Cotton T-Shirt",
                            Price = 29.99m,
                            Size = "M",
                            Stock = 50
                        },
                        new
                        {
                            Id = 2,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6497),
                            AdminID = 1,
                            Brand = "Adidas",
                            CategoryId = 4,
                            Color = "White",
                            Description = "Lightweight performance T-shirt made from premium polyester.",
                            Material = "Polyester",
                            Name = "Adidas Polyester T-Shirt",
                            Price = 34.99m,
                            Size = "L",
                            Stock = 40
                        },
                        new
                        {
                            Id = 3,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6500),
                            AdminID = 1,
                            Brand = "Ralph Lauren",
                            CategoryId = 5,
                            Color = "Light Blue",
                            Description = "Elegant cotton shirt suitable for formal occasions.",
                            Material = "Cotton",
                            Name = "Ralph Lauren Cotton Shirt",
                            Price = 79.99m,
                            Size = "L",
                            Stock = 30
                        },
                        new
                        {
                            Id = 4,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6503),
                            AdminID = 1,
                            Brand = "Tommy Hilfiger",
                            CategoryId = 5,
                            Color = "White",
                            Description = "Stylish and breathable linen shirt for summer days.",
                            Material = "Linen",
                            Name = "Tommy Hilfiger Linen Shirt",
                            Price = 85.50m,
                            Size = "M",
                            Stock = 20
                        },
                        new
                        {
                            Id = 5,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6506),
                            AdminID = 1,
                            Brand = "Levi's",
                            CategoryId = 6,
                            Color = "Dark Blue",
                            Description = "Classic fit jeans crafted from durable denim material.",
                            Material = "Denim",
                            Name = "Levi's Denim Jeans",
                            Price = 69.99m,
                            Size = "32",
                            Stock = 60
                        },
                        new
                        {
                            Id = 6,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6511),
                            AdminID = 1,
                            Brand = "Diesel",
                            CategoryId = 6,
                            Color = "Black",
                            Description = "Trendy slim-fit jeans with a modern look.",
                            Material = "Denim",
                            Name = "Diesel Slim Fit Jeans",
                            Price = 99.99m,
                            Size = "34",
                            Stock = 25
                        },
                        new
                        {
                            Id = 7,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6514),
                            AdminID = 1,
                            Brand = "Nike",
                            CategoryId = 7,
                            Color = "White",
                            Description = "Lightweight running shoes with maximum cushioning.",
                            Material = "Synthetic",
                            Name = "Nike Running Shoes",
                            Price = 120.00m,
                            Size = "43",
                            Stock = 35
                        },
                        new
                        {
                            Id = 8,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6516),
                            AdminID = 1,
                            Brand = "Timberland",
                            CategoryId = 7,
                            Color = "Brown",
                            Description = "Durable leather boots designed for rough terrains.",
                            Material = "Leather",
                            Name = "Timberland Leather Boots",
                            Price = 150.00m,
                            Size = "44",
                            Stock = 20
                        },
                        new
                        {
                            Id = 9,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6519),
                            AdminID = 1,
                            Brand = "Zara",
                            CategoryId = 8,
                            Color = "Red",
                            Description = "Light cotton dress perfect for summer outings.",
                            Material = "Cotton",
                            Name = "Zara Summer Dress",
                            Price = 59.99m,
                            Size = "M",
                            Stock = 40
                        },
                        new
                        {
                            Id = 10,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6566),
                            AdminID = 1,
                            Brand = "H&M",
                            CategoryId = 8,
                            Color = "Black",
                            Description = "Elegant silk evening dress for special occasions.",
                            Material = "Silk",
                            Name = "H&M Silk Evening Dress",
                            Price = 120.00m,
                            Size = "S",
                            Stock = 15
                        },
                        new
                        {
                            Id = 11,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6569),
                            AdminID = 1,
                            Brand = "Mango",
                            CategoryId = 9,
                            Color = "Pink",
                            Description = "Stylish chiffon blouse suitable for office and casual wear.",
                            Material = "Chiffon",
                            Name = "Mango Chiffon Blouse",
                            Price = 45.00m,
                            Size = "S",
                            Stock = 50
                        },
                        new
                        {
                            Id = 12,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6572),
                            AdminID = 1,
                            Brand = "Forever 21",
                            CategoryId = 9,
                            Color = "White",
                            Description = "Casual cotton blouse for everyday style.",
                            Material = "Cotton",
                            Name = "Forever 21 Cotton Blouse",
                            Price = 35.00m,
                            Size = "M",
                            Stock = 45
                        },
                        new
                        {
                            Id = 13,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6575),
                            AdminID = 1,
                            Brand = "Zara",
                            CategoryId = 10,
                            Color = "Black",
                            Description = "Trendy high waist skirt for a modern chic look.",
                            Material = "Polyester",
                            Name = "Zara High Waist Skirt",
                            Price = 49.99m,
                            Size = "M",
                            Stock = 30
                        },
                        new
                        {
                            Id = 14,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6577),
                            AdminID = 1,
                            Brand = "H&M",
                            CategoryId = 10,
                            Color = "Beige",
                            Description = "Comfortable and versatile cotton skirt.",
                            Material = "Cotton",
                            Name = "H&M Cotton Skirt",
                            Price = 39.99m,
                            Size = "S",
                            Stock = 25
                        },
                        new
                        {
                            Id = 15,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6580),
                            AdminID = 1,
                            Brand = "Aldo",
                            CategoryId = 11,
                            Color = "Nude",
                            Description = "Elegant leather heels perfect for formal events.",
                            Material = "Leather",
                            Name = "Aldo Leather Heels",
                            Price = 99.99m,
                            Size = "38",
                            Stock = 20
                        },
                        new
                        {
                            Id = 16,
                            AddedAt = new DateTime(2025, 5, 5, 23, 54, 23, 580, DateTimeKind.Local).AddTicks(6583),
                            AdminID = 1,
                            Brand = "Steve Madden",
                            CategoryId = 11,
                            Color = "Red",
                            Description = "Bold red heels to complete any party look.",
                            Material = "Synthetic",
                            Name = "Steve Madden Red Heels",
                            Price = 110.00m,
                            Size = "37",
                            Stock = 15
                        });
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.TrackingDetails", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TrackingDetails");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.WishListProduct", b =>
                {
                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("WishlistId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductId", "WishlistId");

                    b.HasIndex("WishlistId");

                    b.ToTable("WishListProducts");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Wishlist", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CustomerId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Wishlist");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Address", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Customer", null)
                        .WithMany("Addresses")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Cart", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Customer", null)
                        .WithOne("Carts")
                        .HasForeignKey("Ecommerse_Project.DAL.Entities.Cart", "CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.CartProduct", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Cart", "Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.Product", "Product")
                        .WithMany("Carts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Cart");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Category", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.CustomerProductReview", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Customer", "Customer")
                        .WithMany("ProductReviews")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.Product", "Product")
                        .WithMany("CustomerReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Image", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Product", "Product")
                        .WithMany("Images")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Order", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Customer", null)
                        .WithMany("OrderList")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.TrackingDetails", null)
                        .WithOne("Order")
                        .HasForeignKey("Ecommerse_Project.DAL.Entities.Order", "TrackingDetailsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Paymen", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Product", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Admin", null)
                        .WithMany("Products")
                        .HasForeignKey("AdminID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.WishListProduct", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Product", "Product")
                        .WithMany("WishLists")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.Wishlist", "Wishlist")
                        .WithMany("Products")
                        .HasForeignKey("WishlistId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Wishlist", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.Customer", null)
                        .WithMany("Wishlist")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Ecommerse_Project.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Ecommerse_Project.DAL.Entities.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Admin", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Cart", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Category", b =>
                {
                    b.Navigation("Products");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Customer", b =>
                {
                    b.Navigation("Addresses");

                    b.Navigation("Carts")
                        .IsRequired();

                    b.Navigation("OrderList");

                    b.Navigation("ProductReviews");

                    b.Navigation("Wishlist");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Product", b =>
                {
                    b.Navigation("Carts");

                    b.Navigation("CustomerReviews");

                    b.Navigation("Images");

                    b.Navigation("WishLists");
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.TrackingDetails", b =>
                {
                    b.Navigation("Order")
                        .IsRequired();
                });

            modelBuilder.Entity("Ecommerse_Project.DAL.Entities.Wishlist", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
